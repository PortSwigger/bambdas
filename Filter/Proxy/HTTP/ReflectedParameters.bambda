id: 168d5d70-89a7-6535-9d78-64b890b73ad0
name: Reflected parameters
function: VIEW_FILTER
location: PROXY_HTTP_HISTORY
source: |+
  /**
   * Finds responses which reflect parameter names and values.
   *
   * Useful to identify possible attack surface for XSS, SSTI, header injection,
   * open redirects or similar.
   *
   * @author emanuelduss
   **/

  // Configure to your needs
  int minimumParameterNameLength = 2;
  int minimumParameterValueLength = 3;
  boolean matchCaseSensitive = true;
  Set<String> excludedStrings = Set.of("true", "false", "null");
  Set<HttpParameterType> excludedParameterTypes = Set.of(HttpParameterType.COOKIE); // e.g. HttpParameterType.COOKIE

  if (!requestResponse.hasResponse()){
      return false;
  }

  HttpRequest request = requestResponse.request();
  HttpResponse response = requestResponse.response();

  // Check query, b/c parameters without values are not treated as parameters
  String query = request.path().replace(request.pathWithoutQuery() + "?", "");
  if (query.length() >= minimumParameterValueLength && !excludedStrings.contains(query)){
      if (response.contains(query, matchCaseSensitive) || response.contains(utilities().urlUtils().decode(query), matchCaseSensitive)){
          return true;
      }
  }

  if (request.hasParameters()){
      for (ParsedHttpParameter parameter : request.parameters()){
          HttpParameterType parameterType = parameter.type();
          if (excludedParameterTypes.contains(parameter.type())){
              continue;
          }

          String parameterName = parameter.name();
          if (parameterName.length() >= minimumParameterNameLength && ! excludedStrings.contains(parameterName) &&
              (response.contains(parameterName, matchCaseSensitive) || response.contains(utilities().urlUtils().decode(parameterName), matchCaseSensitive))){
              return true;
          }

          String parameterValue = parameter.value();
          if (parameterValue.length() >= minimumParameterValueLength && ! excludedStrings.contains(parameterValue) &&
              (response.contains(parameterValue, matchCaseSensitive) || response.contains(utilities().urlUtils().decode(parameterValue), matchCaseSensitive))){
              return true;
          }
      }
  }

  return false;
