id: 54834302-45dc-5021-375d-8c9a6174f101
name: Highlight responses with developer notes
function: VIEW_FILTER
location: PROXY_HTTP_HISTORY
source: |+
  /**
   * Bambda Script to Highlight Responses with Developer Notes
   * This script identifies and highlights HTTP responses containing developer notes in HTML and JavaScript files.
   * It highlights HTML responses in green and JavaScript responses in yellow.
   * @author Tur24Tur / BugBountyzip (https://github.com/BugBountyzip)
   **/

  boolean manualColorHighlightEnabled = true;

  // Ensure there is a response and it is not null
  if (!requestResponse.hasResponse()) {
      return false;
  }

  // Use mimeType() for content type detection
  MimeType responseType = requestResponse.response().mimeType();
  boolean isHtml = responseType == MimeType.HTML;
  boolean isJavaScript = responseType == MimeType.SCRIPT;

  // Process only HTML and JavaScript responses
  if (!isHtml && !isJavaScript) {
      return false;
  }

  boolean foundDeveloperNotes = false;
  StringBuilder notesBuilder = new StringBuilder();
  HighlightColor highlightColor = isHtml ? HighlightColor.GREEN : HighlightColor.YELLOW;

  String responseBody = requestResponse.response().bodyToString();
  String[] commentPatterns = isHtml ? new String[]{"<!--(?!\\[if).*?(?<!\\])-->"} : new String[]{"/\\*\\*(.*?)\\*\\*/"};


  for (String pattern : commentPatterns) {
      Pattern regexPattern = Pattern.compile(pattern, Pattern.DOTALL);
      Matcher matcher = regexPattern.matcher(responseBody);

      while (matcher.find()) {
          foundDeveloperNotes = true;
          if (manualColorHighlightEnabled) {
              String note = matcher.group();
              // Limit the note length to 250 characters
              if (note.length() > 250) {
                  note = note.substring(0, 250) + "...";
              }

              if (notesBuilder.length() > 0) {
                  notesBuilder.append("; ");
              }
              notesBuilder.append("Developer note found: ").append(note);
          }
      }
  }

  if (foundDeveloperNotes) {
      requestResponse.annotations().setHighlightColor(highlightColor);
      if (manualColorHighlightEnabled && notesBuilder.length() > 0) {
          requestResponse.annotations().setNotes(notesBuilder.toString());
      }
  }

  return foundDeveloperNotes;
